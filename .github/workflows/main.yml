name: Python Test and Package

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    - name: Lint with black
      run: |
        python -m black --check --diff .
    - name: Lint with flake8
      run: |
        # stop the build for flake8 issues
        python -m flake8 . --show-source --statistics

  test:
    needs: linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Create LFS file list
      run: |
        git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
    - name: Restore LFS cache
      uses: actions/cache@v4
      id: lfs-cache
      with:
        path: .git/lfs
        key: lfs-v1-${{ hashFiles('.lfs-assets-id') }}
        restore-keys:
          lfs-v1-
    - name: Git LFS Pull
      run: |
        git lfs pull
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .[pylibjpeg]
    - name: Test with pytest
      run: |
        python -m pytest


  package_docs:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Create LFS file list
      run: |
        git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
    - name: Restore LFS cache
      uses: actions/cache@v4
      id: lfs-cache
      with:
        path: .git/lfs
        key: lfs-v1-${{ hashFiles('.lfs-assets-id') }}
        restore-keys:
          lfs-v1-
    - name: Git LFS Pull
      run: |
        git lfs pull
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
    - name: Build package
      run: |
        python -m build --wheel --sdist
        python -m twine check dist/*
        ls -la dist
    - name: Upload package
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v1
      with:
        name: python-packages
        path: dist
    - name: Build Sphinx Documentation
      run: |
        python -m pip install dist/rap_sitkcore*.whl -r docs/requirements.txt
        cd docs
        make html
    - name: Upload documentation
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v1
      with:
        name: sphinx-docs
        path: docs/_build/html
    - name: Update gh-pages
      if: github.ref == 'refs/heads/master'
      run: |
        rm docs/_build/html/.buildinfo
        touch docs/_build/html/.nojekyll
        git update-ref refs/heads/${TARGET_BRANCH} origin/${TARGET_BRANCH}
        ./utils/update-gh-pages.sh docs/_build/html
        repo_uri="https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
        git push $repo_uri ${TARGET_BRANCH}
      env:
        GITHUB_TOKEN: ${{ secrets.github_token }}
        TARGET_BRANCH: 'gh-pages'

  github_publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: package_docs
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine
      - uses: actions/download-artifact@v3
        id: download
        with:
          name: python-packages
      - name: Create Release and Upload
        if: startsWith(github.ref, 'refs/tags/v')
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} --repo  ${{ github.repository }} --verify-tag --generate-notes --title "Release ${{ github.ref_name }}"
          gh release upload ${{ github.ref_name }} --repo  ${{ github.repository }} ${{ steps.download.outputs.download-path }}/rap_sitkcore*

      - name: bcbb-pypi upload
        run: |
          python -m twine check ${{steps.download.outputs.download-path}}/*
          python -m twine upload ${{steps.download.outputs.download-path}}/*
        env:
          TWINE_REPOSITORY_URL: https://artifactory.niaid.nih.gov/artifactory/api/pypi/bcbb-pypi
          TWINE_PASSWORD: ${{secrets.BCBB_PYPI_PASSWORD}}
          TWINE_USERNAME: ${{secrets.BCBB_PYPI_USERNAME}}
